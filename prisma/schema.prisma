generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees Employee[]
  schedules Schedule[]
  timeEntries TimeEntry[]

  @@map("admins")
}

model Employee {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  phone    String?
  punchCode String @unique @db.VarChar(4)
  adminId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin       Admin       @relation(fields: [adminId], references: [id], onDelete: Cascade)
  schedules   Schedule[]
  timeEntries TimeEntry[]

  @@map("employees")
}

model Schedule {
  id          String @id @default(cuid())
  employeeId  String
  adminId     String
  dayOfWeek   Int    // 0 = Sunday, 1 = Monday, etc.
  startTime   String // Format: "HH:MM" (24-hour)
  endTime     String // Format: "HH:MM" (24-hour)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  admin    Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([employeeId, dayOfWeek])
  @@map("schedules")
}

model TimeEntry {
  id         String    @id @default(cuid())
  employeeId String
  adminId    String
  date       DateTime  @db.Date
  punchIn    DateTime?
  punchOut   DateTime?
  breakStart DateTime?
  breakEnd   DateTime?
  totalHours Float?    // Calculated field
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  admin    Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@map("time_entries")
}